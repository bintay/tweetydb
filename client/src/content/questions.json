[
   {
      "question": "First things first: if we don't get this navigational database up and running, we're going straight into the sun. Let's fix the query to get our current coordinates. Find the <span class='code'>zulu_time</span>, <span class='code'>azimuth</span>, <span class='code'>altitude</span>, and <span class='code'>zenith</span> columns for each row in the <span class='code'>position</span> table.",
      "template": "SELECT zulu_time, ___ FROM ___;",
      "id": 0,
      "db_type": "sqlite"
   },
   {
      "question": "Wow, that's a lot more positions than we wanted. We can't look through <i>everything</i> there to find our position. Try filtering it based on the time — find the position when <span class='code'>zulu_time</span> is equal to <span class='code'>\"18:32\"</span>.",
      "template": "___ zulu_time, azimuth, altitude, zenith ___ position WHERE ___;",
      "id": 1,
      "db_type": "sqlite"
   },
   {
      "question": "Nice! That should be our approximate position. Now see if you can get the <span class='code'>yaw</span>, <span class='code'>pitch</span>, <span class='code'>roll</span>, and <span class='code'>speed</span> from the <span class='code'>navigation</span> table where our azimuth, altitude, and zenith are equal to the results from above (azimuth = -311, altitude = 2353, and zenith = 729). That'll let us know how we should steer to get out of here.",
      "template": "SELECT ___;",
      "id": 2,
      "db_type": "sqlite"
   },
   {
      "question": "Looks like we have a few options. Let's see which one gives us the largest <span class='code'>chance_of_survival</span> — sort by that column, and limit it to one result.",
      "template": "___ pitch, roll, yaw, speed ___ navigation ___ azimuth = -311 AND altitude = 2353 AND zenith = 729 ORDER BY ___ LIMIT ___;",
      "id": 3,
      "db_type": "sqlite"
   },
   {
      "question": "Okay, we should be able to navigate away safely. The passengers are complaining though — they want to know how long it'll take to get back home. There's a <span class='code'>time_elapsed</span> column for each segment of the journey in the <span class='code'>vectors</span> table. Can you get the sum of all of the times to get the total time elapsed?",
      "template": "SELECT ___ FROM ___;",
      "id": 4,
      "db_type": "sqlite"
   },
   {
      "question": "That doesn't look right — we're faster than light! It looks like the <span class='code'>vectors</span> table has the <span class='code'>time_elapsed</span> for ALL spacecraft. Try grouping the results by <span class='code'>spacecraft</span> to get a better answer for the passengers. Make sure its sorted by spacecraft.",
      "template": "SELECT sum(time_elapsed), spacecraft FROM ___ GROUP BY ___ ORDER BY spacecraft;",
      "id": 5,
      "db_type": "sqlite"
   },
   {
      "question": "Awesome! The SQLite system appears operational. We still have some work to do in the MongoDB and Neo4j systems, but you'll get a briefing before you need to start working through those exercises. Wait here until the next section!<br/><br/>If you have any feedback so far, please put it in the box below!",
      "template": "___",
      "id": 6,
      "db_type": "text"
   },
   {
      "question": "Let's start by getting all of the systems onboard. Look in the <span class='code'>systems</span> collection, and don't filter by anything.",
      "template": "db.___.find(___).exec();",
      "id": 7,
      "db_type": "MongoDB"
   },
   {
      "question": "Instead of manually looking through all of those (since we're lazy programmers), lets find all the systems that currently have a <span class='code'>status</span> of <span class='code'>\"Maintenance Required\"</span>. Remember, we're looking at the <span class='code'>systems</span> collection.",
      "template": "db.___.find(___).exec();",
      "id": 8,
      "db_type": "MongoDB"
   },
   {
      "question": "Okay, looks like minor things (who needs main control surfaces anyway?). Let's double check and make sure we didn't miss anything — find the systems where <span class='code'>status</span> is NOT <span class='code'>\"Operational\"</span>. Hint: <span class='hint'>Remember <span class='code'>$ne</span>?</span>",
      "template": "db.___.find(___).exec();",
      "id": 9,
      "db_type": "MongoDB"
   },
   {
      "question": "Oh no, the LiDar is down! See if you can find which ship the mechanic (Jon Choi) is on. You can find the document in the <span class='code'>mechanics</span> collection filtering by the <span class='code'>name</span> field.",
      "template": "db.___;",
      "id": 10,
      "db_type": "MongoDB"
   },
   {
      "question": "Great! We'll send a message to the SS Bluebird. Now let's see what else could use some preventative maintenance — look in the <span class='code'>systems</span> collection for any systems that either have a <span class='code'>status</span> that ISN'T <span class='code'>\"Operational\"</span> OR have been in service for more than <span class='code'>4000000000</span>ms (look at the <span class='code'>time_in_service</span> field). Hint: <span class='hint'>the syntax for OR is <span class='code'>{ $or: [ ...comma separated conditions... ] }</span></span>",
      "template": "db.systems.___.exec();",
      "id": 11,
      "db_type": "MongoDB"
   }
]
